name: Sync Version Across Files

on:
  push:
    tags:
      - 'v*'  # Triggered on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to set (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  sync-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main
        
    - name: Extract version
      id: extract_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Extract version from tag (remove 'v' prefix if present)
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.extract_version.outputs.VERSION }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix (e.g., 1.0.0 or 1.0.0-beta.1)"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"
        
    - name: Merge tag commit
      run: |
        git fetch origin --tags
        git merge ${{ github.sha }} --no-edit
        
    - name: Update version in setup.cfg
      run: |
        FILE="plastinka_sales_predictor/setup.cfg"
        if [ -f "$FILE" ]; then
          if grep -q "^version = " "$FILE"; then
            sed -i "s/^version = .*/version = ${{ steps.extract_version.outputs.VERSION }}/" "$FILE"
            echo "✅ Updated version in $FILE"
          else
            echo "⚠️ No version line found in $FILE"
          fi
        else
          echo "⚠️ File $FILE not found, skipping"
        fi
        
    - name: Update version in pyproject.toml
      run: |
        FILE="pyproject.toml"
        if [ -f "$FILE" ]; then
          if grep -q '^version = ' "$FILE"; then
            sed -i 's/^version = ".*"/version = "${{ steps.extract_version.outputs.VERSION }}"/' "$FILE"
            echo "✅ Updated version in $FILE"
          else
            echo "⚠️ No version line found in $FILE"
          fi
        else
          echo "⚠️ File $FILE not found, skipping"
        fi
        
    - name: Update version in config.yaml
      run: |
        FILE="plastinka_sales_predictor/datasphere_job/config.yaml"
        if [ -f "$FILE" ]; then
          if grep -q "Sales prediction (v" "$FILE"; then
            sed -i 's/Sales prediction (v[^)]*)/Sales prediction (v${{ steps.extract_version.outputs.VERSION }})/' "$FILE"
            echo "✅ Updated version in $FILE"
          else
            echo "⚠️ No version pattern found in $FILE"
          fi
        else
          echo "⚠️ File $FILE not found, skipping"
        fi
        
    - name: Check if changes were made
      id: check_changes
      run: |
        if git diff --quiet; then
          echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        else
          echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
          echo "Changes detected:"
          git diff
        fi
        
    - name: Commit and push changes
      if: steps.check_changes.outputs.HAS_CHANGES == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add plastinka_sales_predictor/setup.cfg pyproject.toml plastinka_sales_predictor/datasphere_job/config.yaml
        git commit -m "chore: sync version to ${{ steps.extract_version.outputs.VERSION }} [skip ci]"
        git push origin main
        
    - name: Create summary
      run: |
        echo "## Version Sync Complete! 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version updated to:** \`${{ steps.extract_version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Files updated:**" >> $GITHUB_STEP_SUMMARY
        echo "- \`plastinka_sales_predictor/setup.cfg\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`pyproject.toml\`" >> $GITHUB_STEP_SUMMARY  
        echo "- \`plastinka_sales_predictor/datasphere_job/config.yaml\`" >> $GITHUB_STEP_SUMMARY 
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.check_changes.outputs.HAS_CHANGES }}" == "true" ]; then
          echo "**Status:** ✅ Changes committed and pushed" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Status:** ℹ️ No changes needed (versions already up to date)" >> $GITHUB_STEP_SUMMARY
        fi 